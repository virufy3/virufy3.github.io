{"version":3,"sources":["containers/SubmitSteps/Questionary/Step4a/Step4a.tsx"],"names":["schema","Yup","currentSymptoms","required","defined","React","memo","previousStep","nextStep","storeKey","otherSteps","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","history","useHistory","t","useTranslation","useStateMachine","updateAction","state","action","useState","activeStep","setActiveStep","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","errors","isValid","handleDoBack","useCallback","push","goBack","useEffect","scrollToTop","current","total","onSubmit","values","a","hasSymptom","index","selected","length","covidSymptomsStep","extraSpace","first","i18nKey","name","defaultValue","other","render","onChange","value","isCheckbox","v","items","label","excludableValues","leftLabel","leftHandler","leftDisabled","invert"],"mappings":"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","file":"static/js/61.d3f896ae.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport {\n  QuestionText, MainContainer, QuestionAllApply,\n} from '../style';\n\nconst schema = Yup.object({\n  currentSymptoms: Yup.object().required(),\n}).defined();\n\ntype Step4aType = Yup.InferType<typeof schema>;\n\nconst Step4a = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  otherSteps,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors } = formState;\n\n  const {\n    isValid,\n  } = formState;\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(`${t('questionary:headerText')} ${metadata?.current} ${t('questionary:stepOf')} ${metadata?.total}`);\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, metadata, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step4aType) => {\n    if (values) {\n      const {\n        currentSymptoms,\n      } = (values as any);\n\n      action(values);\n\n      let hasSymptom = false;\n\n      // eslint-disable-next-line no-plusplus\n      for (let index = 0; index < currentSymptoms.selected?.length; index++) {\n        if (currentSymptoms.selected[index] !== 'none') {\n          hasSymptom = true;\n          break;\n        }\n      }\n\n      if (hasSymptom && otherSteps) {\n        setActiveStep(false);\n        history.push(otherSteps.covidSymptomsStep);\n        return;\n      }\n\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n\n  return (\n    <MainContainer>\n      <QuestionText extraSpace first>\n        <Trans i18nKey=\"questionary:symptoms.question\">\n          <strong>Which of the below symptoms do you currently have?</strong>\n        </Trans>\n        <QuestionAllApply>{t('questionary:allThatApply')}</QuestionAllApply>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"currentSymptoms\"\n        defaultValue={{ selected: [], other: '' }}\n        render={({ onChange, value }) => (\n          <OptionList\n            isCheckbox\n            value={value}\n            onChange={v => onChange(v)}\n            items={[\n              {\n                value: 'none',\n                label: t('questionary:symptoms.options.none'),\n              },\n              {\n                value: 'bodyAches',\n                label: t('questionary:symptoms.options.bodyAches'),\n              },\n              {\n                value: 'dryCough',\n                label: t('questionary:symptoms.options.dryCough'),\n              },\n              {\n                value: 'wetCough',\n                label: t('questionary:symptoms.options.wetCough'),\n              },\n              {\n                value: 'runnyNose',\n                label: t('questionary:symptoms.options.runnyNose'),\n              },\n              {\n                value: 'feverChillsSweating',\n                label: t('questionary:symptoms.options.feverChillsSweating'),\n              },\n              {\n                value: 'headaches',\n                label: t('questionary:symptoms.options.headaches'),\n              },\n              {\n                value: 'lossTasteAndOrSmell',\n                label: t('questionary:symptoms.options.lossTasteOrSmell'),\n              },\n              {\n                value: 'newOrWorseCough',\n                label: t('questionary:symptoms.options.worseCough'),\n              },\n              {\n                value: 'breathShortness',\n                label: t('questionary:symptoms.options.breathShortness'),\n              },\n              {\n                value: 'soreThroat',\n                label: t('questionary:symptoms.options.soreThroat'),\n              },\n              {\n                value: 'chestTightness',\n                label: t('questionary:symptoms.options.chestTightness'),\n              },\n              {\n                value: 'vomitingAndDiarrhea',\n                label: t('questionary:symptoms.options.vomitingAndDiarrhea'),\n              },\n              {\n                value: 'weakness',\n                label: t('questionary:symptoms.options.weakness'),\n              },\n              {\n                value: 'other',\n                label: t('questionary:symptoms.options.other'),\n              },\n            ]}\n            excludableValues={['none']}\n          />\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n      <Portal>\n        <WizardButtons\n          leftLabel={t('questionary:nextButton')}\n          leftHandler={handleSubmit(onSubmit)}\n          leftDisabled={!isValid}\n          invert\n        />\n      </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step4a);\n"],"sourceRoot":""}